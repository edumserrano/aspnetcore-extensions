name: Dependabot auto merge PR

on:
  workflow_run:
    workflows: ["Publish Nuget packages"]
    types:
    - completed

defaults:
  run:
    shell: pwsh

jobs:

  auto-merge-pr:
    name: Auto merge dependabot PR
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    env:
      PR_URL_ARTIFACT_NAME: pr-url
      PR_URL_FILE_NAME: pr-url.txt
    steps:
    - name: Download artifact
      uses: dawidd6/action-download-artifact@v2
      continue-on-error: true
      with:
        workflow: nuget-publish.yml
        workflow_conclusion: success
        name:  ${{env.PR_URL_ARTIFACT_NAME}}
    - name: Check if PR was triggered by dependabot
      id: dependabot-pr-check
      run: |
        if(Test-Path -Path ./${{env.PR_URL_FILE_NAME}} -PathType Leaf){
          Write-Host "::set-output name=TRIGGERED_FROM_DEPENDABOT_PR::true"
          Write-Host "Set output variable TRIGGERED_FROM_DEPENDABOT_PR to true"
          $prUrl = Get-Content ./${{env.PR_URL_FILE_NAME}}
          Write-Host "::set-output name=PR_URL::$prUrl"
          Write-Host "Set output variable PR_URL to $prUrl"
          exit 0;
        }
        Write-Host "::warning::This workflow was triggered from a PR that wasn't created by dependabot. Nothing to do."
    - name: Fetch Dependabot metadata
      uses: dependabot/fetch-metadata@v1.1.0
      if: ${{ steps.dependabot-pr-check.outputs.TRIGGERED_FROM_DEPENDABOT_PR }} == 'true'
      with:
        github-token: '${{ secrets.GITHUB_TOKEN }}'
    - name: Auto approve and merge the PR
      if: ${{ steps.dependabot-pr-check.outputs.TRIGGERED_FROM_DEPENDABOT_PR }} == 'true'
      run: |
        $prUrl = "${{ steps.dependabot-pr-check.outputs.PR_URL }}"
        # Write-Host "gh pr merge --auto --squash --delete-branch"
        gh pr merge --auto --squash --delete-branch "$prUrl"
        # Write-Host "gh pr review --approve"
        gh pr review --approve "$prUrl"
      

  # auto-approve-and-merge:
  #   needs: [nuget-publish]
  #   runs-on: ubuntu-latest
  #   if: ${{ github.event_name == 'pull_request_target' && github.actor == 'dependabot[bot]' }}
  #   steps:
  #   - name: Fetch Dependabot metadata
  #     id: dependabot-metadata
  #     uses: dependabot/fetch-metadata@v1.1.0
  #     with:
  #       github-token: '${{ secrets.GITHUB_TOKEN }}'
  #   - name: Auto approve and merge the PR
  #     run: |
  #       # echo "gh auth status"
  #       # gh auth status
  #       # echo "gh auth status --show-token"
  #       # gh auth status --show-token
  #       echo "gh pr merge --auto --squash --delete-branch"
  #       # gh pr merge --auto --squash --delete-branch "$PR_URL"
  #       # echo "gh pr review --approve"
  #       # gh pr review --approve "$PR_URL"
  #     env:
  #       PR_URL: '${{ github.event.pull_request.html_url }}'
  #       # Depending on branch protection rules, a  manually populated
  #       # `GITHUB_TOKEN_WORKAROUND` secret with permissions to push to
  #       # a protected branch must be used.
  #       #
  #       # When using a custom token, it is recommended to leave the following
  #       # comment for other developers to be aware of the reasoning behind it:
  #       #
  #       # This must be used as GitHub Actions token does not support pushing
  #       # to protected branches.
  #       GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
      