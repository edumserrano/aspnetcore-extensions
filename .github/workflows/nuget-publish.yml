name: Publish Nuget packages

on:  
  workflow_dispatch:
  push:
    branches: [ master ]
    paths:
    - 'src/**'
    - 'tests/**'
  pull_request:
    branches: [ master ]
    paths:
    - 'src/**'
    - 'tests/**'

jobs:
  build:
    strategy:
      matrix: 
        os: [ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x
    - name: Install coverlet.console dotnet tool
      shell: pwsh
      run:  dotnet tool install --global coverlet.console      
    - name: Install reportgenerator dotnet tool
      shell: pwsh
      run:  dotnet tool install --global dotnet-reportgenerator-globaltool
    - name: Clears local NuGet resources 
      if: matrix.os == 'windows-latest' # required due to bug when using dotnet cli on windows-latest. See https://github.com/dotnet/core/issues/5881 and https://github.com/actions/setup-dotnet/issues/155
      shell: pwsh
      run: dotnet nuget locals all --clear    
    - name: Restore dependencies
      shell: pwsh
      run: dotnet restore DotNet.Sdk.Extensions.sln
    - name: Build
      shell: pwsh
      run: dotnet build DotNet.Sdk.Extensions.sln --no-restore
    - name: Test and code coverage
      shell: pwsh
      run: |
        dotnet test .\tests\DotNet.Sdk.Extensions.Tests\DotNet.Sdk.Extensions.Tests.csproj /p:CollectCoverage=true
        #dotnet test DotNet.Sdk.Extensions.sln `
        #  --verbosity normal `
        #  --logger trx `
        #  --results-directory "$(Join-Path -Path (Get-Location) -ChildPath "tests/test-results")" `
        #  /p:CollectCoverage=true `
        #  /p:Include="[LexisNexis.Rosetta.Proxy]*%2c[LexisNexis.Rosetta.Core]*" `
        #  /p:CoverletOutput="$(Join-Path -Path (Get-Location) -ChildPath "tests/test-results/coverage-results/")" `
        #  /p:MergeWith="$(Join-Path -Path (Get-Location) -ChildPath "tests/test-results/coverage-results/coverage.json")" `
        #  /p:CoverletOutputFormat="json%2copencover" `
        #  -m:1
  nuget-publish:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x
    - name: Package DotNet.Sdk.Extensions
      shell: pwsh
      run: dotnet pack ./src/DotNet.Sdk.Extensions/DotNet.Sdk.Extensions.csproj -c Release
    - name: Pack DotNet.Sdk.Extensions.Testing
      shell: pwsh
      run: dotnet pack ./src/DotNet.Sdk.Extensions.Testing/DotNet.Sdk.Extensions.Testing.csproj -c Release
    - name: Publish DotNet.Sdk.Extensions nuget and symbols
      shell: pwsh
      run: dotnet nuget push ./*.nupkg --api-key $env:NUGET_PUSH_API_KEY --source https://api.nuget.org/v3/index.json --skip-duplicate
      working-directory: ./src/DotNet.Sdk.Extensions/bin/Release/
      env:
        NUGET_PUSH_API_KEY: ${{ secrets.NUGET_PUSH_API_KEY }}
    - name: Publish DotNet.Sdk.Extensions.Testing nuget and symbols
      shell: pwsh
      run: dotnet nuget push ./*.nupkg --api-key $env:NUGET_PUSH_API_KEY --source https://api.nuget.org/v3/index.json --skip-duplicate
      working-directory: ./src/DotNet.Sdk.Extensions.Testing/bin/Release/
      env:
        NUGET_PUSH_API_KEY: ${{ secrets.NUGET_PUSH_API_KEY }}
    - uses: actions/upload-artifact@v2
      with:
        name: nuget-packages-and-symbols
        path: |
          src/DotNet.Sdk.Extensions.Testing/bin/Release/*.nupkg
          src/DotNet.Sdk.Extensions.Testing/bin/Release/*.snupkg
          src/DotNet.Sdk.Extensions/bin/Release/*.nupkg
          src/DotNet.Sdk.Extensions/bin/Release/*.snupkg
