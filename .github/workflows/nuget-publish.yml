name: Publish Nuget packages

on:  
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
    - 'src/**'
    - 'tests/**'
    - '.github/**'
  pull_request:
    branches: [ main ]
    paths:
    - 'src/**'
    - 'tests/**'
    - '.github/**'

env:
  SLN_FILEPATH : ${{github.workspace}}/DotNet.Sdk.Extensions.sln
  EXTENSIONS_CSPROJ_FILEPATH : ${{github.workspace}}/src/DotNet.Sdk.Extensions/DotNet.Sdk.Extensions.csproj
  TESTING_EXTENSIONS_CSPROJ_FILEPATH : ${{github.workspace}}/src/DotNet.Sdk.Extensions.Testing/DotNet.Sdk.Extensions.Testing.csproj
  EXTENSIONS_BIN_FOLDER : ${{github.workspace}}/src/DotNet.Sdk.Extensions/bin/Release
  TESTING_EXTENSIONS_BIN_FOLDER : ${{github.workspace}}/src/DotNet.Sdk.Extensions.Testing/bin/Release

jobs:

  build:
    strategy:
      matrix: 
        os: [ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x
    - name: Install reportgenerator dotnet tool
      shell: pwsh
      run:  dotnet tool install --global dotnet-reportgenerator-globaltool
    - name: Clears local NuGet resources 
      if: matrix.os == 'windows-latest' # required due to bug when using dotnet cli on windows-latest. See https://github.com/dotnet/core/issues/5881 and https://github.com/actions/setup-dotnet/issues/155
      shell: pwsh
      run: dotnet nuget locals all --clear
    - name: Restore dependencies
      shell: pwsh
      run: dotnet restore ${{env.SLN_FILEPATH}}
    - name: Build
      shell: pwsh
      run: dotnet build ${{env.SLN_FILEPATH}} -c Release --no-restore
    - name: Test and code coverage
      shell: pwsh
      run: |
        dotnet test ${{env.SLN_FILEPATH}} `
          -c Release `
          --no-build `
          --verbosity normal `
          --logger trx `
          --results-directory "$(Join-Path -Path (Get-Location) -ChildPath "tests/test-results")" `
          /p:CollectCoverage=true `
          /p:CoverletOutput="$(Join-Path -Path (Get-Location) -ChildPath "tests/test-results/coverage-results/")" `
          /p:MergeWith="$(Join-Path -Path (Get-Location) -ChildPath "tests/test-results/coverage-results/coverage.json")" `
          /p:CoverletOutputFormat="json%2copencover" `
          -m:1
    - name: Generate code coverage report
      shell: pwsh
      if: matrix.os == 'ubuntu-latest'
      run: |
        reportgenerator `
          "-reports:$(Join-Path -Path (Get-Location) -ChildPath "tests/test-results/coverage-results/coverage.opencover.xml")" `
          "-targetdir:$(Join-Path -Path (Get-Location) -ChildPath "tests/test-results/coverage-results/report")" `
          -reportTypes:htmlInline
    - name: Upload code coverage report to artifacts
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v2
      with:
        name: code-coverage-report
        path: tests/test-results/coverage-results/report/

  nuget-publish:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x
    - name: Package DotNet.Sdk.Extensions
      shell: pwsh
      run: dotnet pack ${{env.EXTENSIONS_CSPROJ_FILEPATH}} -c Release
    - name: Pack DotNet.Sdk.Extensions.Testing
      shell: pwsh
      run: dotnet pack ${{env.TESTING_EXTENSIONS_CSPROJ_FILEPATH}} -c Release
    - name: 'Publish DotNet.Sdk.Extensions nuget and symbols'
      uses: ./.github/actions/nuget-push
      if: ${{ github.event_name != 'pull_request' }}
      env:
        NUGET_PUSH_API_KEY: ${{ secrets.NUGET_PUSH_API_KEY }}
      with:
        api-key: '$env:NUGET_PUSH_API_KEY'
        source: 'https://api.nuget.org/v3/index.json'
        working-directory: ${{env.EXTENSIONS_BIN_FOLDER}}
    - name: 'Publish DotNet.Sdk.Extensions.Testing nuget and symbols'
      uses: ./.github/actions/nuget-push
      if: ${{ github.event_name != 'pull_request' }}
      env:
        NUGET_PUSH_API_KEY: ${{ secrets.NUGET_PUSH_API_KEY }}
      with:
        api-key: '$env:NUGET_PUSH_API_KEY'
        source: 'https://api.nuget.org/v3/index.json'
        working-directory: ${{env.TESTING_EXTENSIONS_BIN_FOLDER}}
    - name: Upload nugets and symbols to artifacts
      uses: actions/upload-artifact@v2
      with:
        name: nuget-packages-and-symbols
        path: |
          ${{env.EXTENSIONS_BIN_FOLDER}}/*.nupkg
          ${{env.EXTENSIONS_BIN_FOLDER}}/*.snupkg
          ${{env.TESTING_EXTENSIONS_BIN_FOLDER}}/*.nupkg
          ${{env.TESTING_EXTENSIONS_BIN_FOLDER}}/*.snupkg

  debug:    
    needs: [nuget-publish]
    runs-on: ubuntu-latest
    steps:
    - name: Package DotNet.Sdk.Extensions
      shell: pwsh
      run: |
        Write-Host "github.actor ${{ github.actor }}"
        Write-Host "github.event_name ${{ github.event_name }}"


  auto-approve-and-merge:
    needs: [nuget-publish]
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'pull_request' && github.actor == 'dependabot[bot]' }}
    steps:
    - name: Fetch Dependabot metadata
      id: dependabot-metadata
      uses: dependabot/fetch-metadata@v1.1.0
      with:
        github-token: '${{ secrets.GITHUB_TOKEN }}'
    - name: Auto approve and merge the PR
      run: |
        gh pr review --approve "$PR_URL"
        gh pr merge --merge --auto --delete-branch "$PR_URL"
      env:
        PR_URL: '${{ github.event.pull_request.html_url }}'
        GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
      